{"version":3,"sources":["Counter.js","App.js","serviceWorker.js","index.js"],"names":["displayAsCol","display","flexDirection","displayAsRow","justifyContent","alignItems","marginTop","marginBottom","styleTitle","textAlign","margin","styleCount","marginLeft","marginRight","fontSize","fetchMotto","dispatch","fetch","then","res","text","motto","type","Counter","timer","intv","resetTimer","_this","clearInterval","increase","props","cnt","MAXCNT","increasePerSec","setInterval","decrease","MINCNT","decreasePerSec","forceError","errorMsg","react_default","a","createElement","style","Object","objectSpread","width","this","onClick","PureComponent","connect","state","counter","store","createStore","combineReducers","env","arguments","length","undefined","action","Math","min","max","applyMiddleware","thunk","next","console","log","getState","Error","err","App","es","height","src_Counter","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a621c0aa.chunk.js","sourcesContent":["import React, { PureComponent } from 'react'\nimport { connect } from 'react-redux';\n\nconst displayAsCol = {\n  display: 'flex',\n  flexDirection: 'column',\n}\n\nconst displayAsRow = {\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  marginTop: 20,\n  marginBottom: 20,\n}\n\nconst styleTitle = {\n  textAlign: 'center',\n  margin: 0,\n}\n\nconst styleCount = {\n  marginLeft: 20,\n  marginRight: 20,\n  fontSize: 40,\n}\n\n// action\nfunction fetchMotto() {\n  return dispatch => fetch('https://api.github.com/zen')\n    .then(res => res.text())\n    .then(motto => dispatch({ type: 'FETCH_MOTTO', motto }))\n}\n\nclass Counter extends PureComponent {\n  static MAXCNT = 20;\n  static MINCNT = 0;\n\n  timer = {\n    type: '',\n    intv: null,\n  };\n\n  resetTimer = () => {\n    if (!this.timer.type) { return }\n    clearInterval(this.timer.intv)\n    this.timer = {\n      type: '',\n      intv: null,\n    }\n  }\n\n  increase = () => {\n    if (this.props.cnt < Counter.MAXCNT) {\n      this.props.dispatch({ type: 'INC' })\n      this.props.dispatch(fetchMotto())\n    }\n  };\n\n  increasePerSec = () => {\n    if (this.timer.type === 'INC') { return }\n\n    this.increase()\n    this.resetTimer()\n\n    this.timer = {\n      type: 'INC',\n      intv: setInterval(() => {\n        this.increase()\n        if (this.props.cnt >= Counter.MAXCNT) {\n          this.resetTimer()\n        }\n      }, 1000),\n    }\n  };\n\n  decrease = () => {\n    if (this.props.cnt > Counter.MINCNT) {\n      this.props.dispatch({ type: 'DEC' })\n      this.props.dispatch(fetchMotto())\n    }\n  };\n\n  decreasePerSec = () => {\n    if (this.timer.type === 'DEC') { return }\n\n    this.decrease()\n    this.resetTimer()\n\n    this.timer = {\n      type: 'DEC',\n      intv: setInterval(() => {\n        this.decrease()\n        if (this.props.cnt <= Counter.MINCNT) {\n          this.resetTimer()\n        }\n      }, 1000),\n    }\n  };\n\n  forceError = () => {\n    this.props.dispatch({\n      type: 'THROW_ERROR',\n      errorMsg: 'Nothing, just test this catcher. Having fun!',\n    })\n  }\n\n  render() {\n    return (\n      <div style={{\n        ...displayAsCol,\n        width: 150,\n      }}>\n        <h2 style={styleTitle}>Counter</h2>\n        <div>{this.props.motto}</div>\n        <div style={displayAsRow}>\n          <button onClick={this.decrease}>-</button>\n          <div style={styleCount}>{this.props.cnt}</div>\n          <button onClick={this.increase}>+</button>\n        </div>\n        <div style={displayAsRow}>\n          <button onClick={this.decreasePerSec}>-1/s</button>\n          <button onClick={this.increasePerSec}>+1/s</button>\n        </div>\n        <button onClick={this.forceError}>kick an error!</button>\n      </div>\n    )\n  }\n}\n\nexport default connect(state => ({\n  cnt: state.counter.cnt,\n  motto: state.motto,\n}))(Counter)\n","import React, { Component } from 'react';\n\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\n\nimport thunk from 'redux-thunk';\n\nimport Counter from './Counter'\n\nimport './App.css';\n\n// reducers\nconst env = (state = {\n  errorMsg: '',\n}, action) => {\n  if (action.type === 'THROW_ERROR') {\n    return {\n      ...state,\n      errorMsg: action.errorMsg,\n    }\n  }\n\n  return state\n}\n\nconst counter = (state = {\n  cnt: 0,\n}, action) => {\n  switch (action.type) {\n    case 'INC':\n      return {\n        ...state,\n        cnt: Math.min(state.cnt + 1, Counter.MAXCNT),\n      }\n    case 'DEC':\n      return {\n        ...state,\n        cnt: Math.max(state.cnt - 1, Counter.MINCNT),\n      }\n    default:\n      return state\n  }\n};\n\nconst motto = (state = '', action) => {\n  if (action.type === 'FETCH_MOTTO') {\n    return action.motto\n  }\n\n  return state\n}\n\n// middleware\nconst logger = store => next => action => {\n  console.log('dispatching', action)\n  const res = next(action)\n  console.log('next state', store.getState())\n  return res\n}\n\nconst errorCatcher = store => next => action => {\n  try {\n    const res = next(action)\n    const state = store.getState()\n\n    if (state.env.errorMsg) { throw new Error(state.env.errorMsg) }\n\n    return res\n  } catch (err) {\n    throw err\n  }\n}\n\n// init\nconst store = createStore(\n  combineReducers({ env, counter, motto }),\n  applyMiddleware(thunk, logger, errorCatcher)\n);\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div style={{\n          width: '100%',\n          height: '100%',\n\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}>\n          <Counter />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}